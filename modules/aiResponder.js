const axios = require('axios');
const { getShopInfo, getAllProducts, getAllBrandsAndCategories } = require('./supabase');
const { calculateDistanceKm, normalizeVariants } = require('./deliveryCalculator');
const { getSession, updateSession } = require('./sessionManager');
const levenshtein = require('fast-levenshtein');
require('dotenv').config();

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

function extractAddress(message) {
  const variants = normalizeVariants(message);
  return variants.length > 0 ? variants[0] : null;
}

function containsOrderPhrase(text) {
  const orderPhrases = ['–∑–∞–∫–∞–∂—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É', '–¥–∞–≤–∞–π', '–≤–æ–∑—å–º–∏', '–≤—Ç–æ—Ä–æ–π', '–ø–µ—Ä–≤—ã–π', '1', '2', '3', '–æ–∫–µ–π', '–¥–∞', '–∞–≥–∞', '–∑–∞–∫–∞–∂–µ–º'];
  return orderPhrases.some(phrase => text.toLowerCase().includes(phrase));
}

function isPossibleAddress(text) {
  return /\d{1,3}/.test(text) || /(—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω|–¥–æ–º|–∫–æ—Ä–ø—É—Å|–∫–≤–∞—Ä—Ç–∞–ª)/i.test(text);
}

async function getAIResponse(userMessage, userId = 'default') {
  try {
    const session = getSession(userId);
    const address = extractAddress(userMessage);
    const products = await getAllProducts();
    const normalizedMessage = userMessage.toLowerCase();

    const numMatch = normalizedMessage.match(/\b(\d+)\b/);
    if (numMatch) {
      const index = parseInt(numMatch[1]) - 1;
      if (products[index]) {
        updateSession(userId, { selectedProduct: products[index] });
        return {
          text: `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${products[index].name} (${products[index].price}‚Ç∏). –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?`,
          recommendedProduct: products[index]
        };
      }
    }

    if (session.selectedProduct && containsOrderPhrase(normalizedMessage) && !address) {
      return {
        text: `‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: ${session.selectedProduct.name} –∑–∞ ${session.selectedProduct.price}‚Ç∏. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.`,
        recommendedProduct: session.selectedProduct
      };
    }

    if (address && isPossibleAddress(normalizedMessage)) {
      const delivery = await calculateDistanceKm(address);
      if (typeof delivery.km === 'number' && typeof delivery.price === 'number') {
        const productLine = session.selectedProduct
          ? `‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: ${session.selectedProduct.name} –∑–∞ ${session.selectedProduct.price}‚Ç∏.\n`
          : '';
        return {
          text: `${productLine}üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: ~${delivery.km} –∫–º\nüöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery.price}‚Ç∏ (500‚Ç∏ + 200‚Ç∏ √ó ${delivery.km} –∫–º)`,
          recommendedProduct: session.selectedProduct || null
        };
      }
    }

    const { brands, categories } = await getAllBrandsAndCategories();
    const matchedBrand = brands.find(brand => normalizedMessage.includes(brand));
    const matchedCategory = categories.find(cat => normalizedMessage.includes(cat));

    if (matchedBrand && matchedCategory) {
      const filtered = products.filter(p =>
        p.brand.toLowerCase().includes(matchedBrand) &&
        (p.category?.toLowerCase()?.includes(matchedCategory) || p.name.toLowerCase().includes(matchedCategory))
      );

      if (filtered.length > 0) {
        const productList = filtered.map((p, i) =>
          `${i + 1}) ${p.name} ‚Äî ${p.description} (${p.price}‚Ç∏)`
        ).join('\n');

        return {
          text: `üîç –ù–∞–π–¥–µ–Ω–æ ${filtered.length} —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –±—Ä–µ–Ω–¥–∞ ${matchedBrand.toUpperCase()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${matchedCategory}":\n\n${productList}\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.`,
          recommendedProduct: null
        };
      }
    }

    const exactMatch = products.find(p => normalizedMessage.includes(p.name.toLowerCase()));
    if (exactMatch) {
      updateSession(userId, { selectedProduct: exactMatch });
      return {
        text: `üîç –ù–∞–π–¥–µ–Ω–æ: ${exactMatch.name} (${exactMatch.price}‚Ç∏).\n–û–ø–∏—Å–∞–Ω–∏–µ: ${exactMatch.description}.\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`,
        recommendedProduct: exactMatch
      };
    }

    const partialMatches = products.filter(p => {
      const terms = [p.name, p.category, p.description].map(str => str?.toLowerCase() || '');
      return terms.some(term =>
        term.includes(normalizedMessage) || normalizedMessage.includes(term)
      );
    });

    if (partialMatches.length === 1) {
      const product = partialMatches[0];
      updateSession(userId, { selectedProduct: product });
      return {
        text: `üîç –ü–æ—Ö–æ–∂–µ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: ${product.name} (${product.price}‚Ç∏).\n–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}.\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`,
        recommendedProduct: product
      };
    }

    const fuzzyMatches = products
      .map(p => {
        const productName = p.name.toLowerCase();
        const distance = levenshtein.get(normalizedMessage, productName);
        const nameContainsWord = normalizedMessage.split(' ').some(word => productName.includes(word));
        return { product: p, distance, nameContainsWord };
      })
      .filter(item => item.distance <= 5 || item.nameContainsWord)
      .sort((a, b) => a.distance - b.distance);

    if (fuzzyMatches.length > 0) {
      const bestMatch = fuzzyMatches[0].product;
      updateSession(userId, { selectedProduct: bestMatch });
      return {
        text: `üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: ${bestMatch.name} (${bestMatch.price}‚Ç∏).\n–û–ø–∏—Å–∞–Ω–∏–µ: ${bestMatch.description}.\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`,
        recommendedProduct: bestMatch
      };
    }

    const aiText = await askOpenRouter(userMessage, products, session);
    const textLower = aiText.toLowerCase();
    const matchedProduct = products.find(p => textLower.includes(p.name.toLowerCase()));
    
    if (matchedProduct) {
      updateSession(userId, { selectedProduct: matchedProduct });
      return {
        text: `üîç –ù–∞–π–¥–µ–Ω–æ: ${matchedProduct.name} (${matchedProduct.price}‚Ç∏).\n–û–ø–∏—Å–∞–Ω–∏–µ: ${matchedProduct.description}.\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`,
        recommendedProduct: matchedProduct
      };
    }
    
    if (aiText && aiText.length > 10) {
      return {
        text: aiText,
        recommendedProduct: null
      };
    }
    

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getAIResponse:', error.message);
    return { text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', recommendedProduct: null };
  }
}

async function askOpenRouter(userMessage, products, session) {
  try {
    const shopInfo = await getShopInfo();
    const productList = products.map(p =>
      `üîπ ${p.name} ‚Äî ${p.description} (–ë—Ä–µ–Ω–¥: ${p.brand}, –¶–µ–Ω–∞: ${p.price}‚Ç∏)`
    ).join('\n');

    const historyContext = session?.selectedProduct
      ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä: ${session.selectedProduct.name} (${session.selectedProduct.price}‚Ç∏)`
      : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä.';

    const messages = [
      {
        role: 'system',
        content: `–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

${historyContext}

–°–∫–ª–∞–¥: –ê–ª–º–∞—Ç—ã, –†–∞–π—ã–º–±–µ–∫–∞ 373.
–°–∞–π—Ç: https://sabyrshop.freesite.online/

–û–ø–ª–∞—Ç–∞:
- Kaspi: +7 XXX XXX XXXX
- –†–∞—Å—Å—Ä–æ—á–∫–∞: –ø–æ–ø—Ä–æ—Å–∏ –§–ò–û –∏ –ò–ò–ù
- –ù–∞–ª–∏—á–Ω—ã–µ: –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
- –ö–∞—Ä—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É https://sabyrshop.freesite.online/

–î–æ—Å—Ç–∞–≤–∫–∞:
- –ü–æ –ê–ª–º–∞—Ç—ã: 500‚Ç∏ + 200‚Ç∏ –∑–∞ –∫–º
- –ó–∞ –ø—Ä–µ–¥–µ–ª—ã –ê–ª–º–∞—Ç—ã: —á–µ—Ä–µ–∑ –ö–∞–∑–ø–æ—á—Ç—É ‚Äî 2500‚Ç∏

–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:
${productList}

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –∑–∞–ø—Ä–æ—Å—É –∞–¥—Ä–µ—Å–∞.`
      },
      {
        role: 'user',
        content: userMessage
      }
    ];

    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'openai/gpt-3.5-turbo',
        messages
      },
      {
        headers: {
          Authorization: `Bearer ${OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('OpenRouter –æ—à–∏–±–∫–∞:', error.message);
    return 'ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

module.exports = { getAIResponse };
