const { getAllProducts, saveOrder } = require('./supabase');
const { calculateDistanceKm } = require('./deliveryCalculator');
const { getSession, updateSession, clearSession } = require('./sessionManager');

// üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ –∑–∞–∫–∞–∑–∞
async function handleOrderFlow(msg, text) {
  const session = getSession(msg.from);

  // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑
  if (session.state === 'awaiting_order_confirmation' && ['–¥–∞', '—Ö–æ—á—É', '–æ—Ñ–æ—Ä–º–∏—Ç—å'].some(word => text.includes(word))) {
    updateSession(msg.from, { state: 'awaiting_address' });
    return `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${session.selectedProduct.name} (${session.selectedProduct.price}‚Ç∏).\n–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.`;
  }

  // üöö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å
  if (session.state === 'awaiting_address') {
    const address = msg.body.trim();
    try {
      const { km, price } = await calculateDistanceKm(address);
      const success = await saveOrder(msg.from, session.selectedProduct, address, price);

      if (success) {
        clearSession(msg.from);
        return `üßæ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüìç –ê–¥—Ä–µ—Å: ${address}\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: ${price}‚Ç∏ (~${km} –∫–º)\nüì¶ –¢–æ–≤–∞—Ä: ${session.selectedProduct.name} (${session.selectedProduct.price}‚Ç∏)`;
      } else {
        return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
    } catch (err) {
      if (err.message.includes('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.';
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏:', err.message);
        return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
    }
  }

  // üß≤ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Ç–µ–∫—Å—Ç—É (–∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ)
  const products = await getAllProducts();
  const found = products.find(p => text.includes(p.name.toLowerCase()));

  if (found) {
    updateSession(msg.from, {
      selectedProduct: found,
      state: 'awaiting_order_confirmation'
    });

    return `üîç –ù–∞–π–¥–µ–Ω–æ: ${found.name} (${found.price}‚Ç∏).\n–û–ø–∏—Å–∞–Ω–∏–µ: ${found.description}\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`;
  }

  return null; // –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚Äî –≤–µ—Ä–Ω—É—Ç—å null
}

module.exports = { handleOrderFlow };
