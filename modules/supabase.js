const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function getShopInfo() {
  const { data, error } = await supabase
    .from('shop_info')
    .select('info')
    .eq('id', 1)
    .single();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:', error.message);
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
  }

  return data.info;
}

async function getAllProducts() {
  const { data, error } = await supabase
    .from('products')
    .select('id, name, brand, price, description, category');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
    return [];
  }

  return data.map(product => ({
    ...product,
    description: product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
  }));
}

// üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function getAllBrandsAndCategories() {
  const { data, error } = await supabase.from('products').select('brand, category');
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
    return { brands: [], categories: [] };
  }

  const brands = [...new Set(data.map(p => p.brand?.toLowerCase()).filter(Boolean))];
  const categories = [...new Set(data.map(p => p.category?.toLowerCase()).filter(Boolean))];

  return { brands, categories };
}

// üõí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders
async function saveOrder(userId, product, address, deliveryPrice) {
  const { error } = await supabase.from('orders').insert([{
    user_id: userId,
    product_id: product.id,
    product_name: product.name,
    product_price: product.price,
    address,
    delivery_price: deliveryPrice,
    created_at: new Date().toISOString()
  }]);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
    return false;
  }

  return true;
}
// üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à—É—Ä—É–ø–æ–≤—ë—Ä—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
async function getScrewdriversFromDB() {
  const { data, error } = await supabase
    .from('products')
    .select('id, name, brand, price, description, category');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—É—Ä—É–ø–æ–≤—ë—Ä—Ç–æ–≤:', error.message);
    return [];
  }

  const screwdrivers = data.filter(p =>
    (p.name + p.description).toLowerCase().includes('—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç') ||
    (p.name + p.description).toLowerCase().includes('—à—É—Ä—É–ø–æ–≤—ë—Ä—Ç')
  );

  return screwdrivers.map(product => ({
    ...product,
    description: product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
  }));
}



module.exports = {
  getShopInfo,
  getAllProducts,
  getAllBrandsAndCategories,
  saveOrder,
  getScrewdriversFromDB
};

